#pragma once

#include "boolean_model.hpp"
#include <memory>
#include <queue>
#include <set>

// SpellingCorrector deals with trying to match the user's query to some result
// in case of typos during input. It is currently oblivious of missing
// whitespace characters.
class SpellingCorrector {
  // Supported characters: [a-z], [0-9], '
  static const size_t alphabet_size = 37;

  // The user is allowed a maximum of two mistakes per word.
  static const int edit_distance_threshold = 2;

  // We suggest a maximum of five possible corrections in case of mistake.
  static const size_t max_num_query_alternatives = 5;

  // Contains the supported characters with their assigned id's
  static std::map<char, int> character_map_;

public:
  SpellingCorrector();
  explicit SpellingCorrector(const Index &index);

  std::vector<int> CorrectSpelling(const std::string &query,
                                   const Index &index);

private:
  struct TrieNode {
    bool is_word = false;
    std::vector<size_t> next_node;
    TrieNode();
  };
  using Trie = std::vector<TrieNode>;

  struct QueryAlternative {
    std::string word;
    std::vector<int> matches;
    QueryAlternative(const std::string &word, const std::vector<int> &matches);
    bool operator<(const QueryAlternative &rhs) const;
  };

  void TrieInsert(const std::string &word);

  // Finds possible alternatives to the word `input` that appear in the trie,
  // under the constraint that the alternative must be `threshold` away from the
  // original input. Distance is measured by edit distance where allowed
  // operations are: insert, delete, replace. `word` is being gradually build by
  // the recursive function, `node` represents the trie node corresponding to
  // `word` and `alternatives` will contain all valid words generated by the
  // function.
  void GetWordAlternatives(const std::string &input, size_t i, int threshold,
                           std::string &word, int node,
                           std::set<std::string> &alternatives);

  void GetQueryAlternatives(
      const std::vector<std::set<std::string>> &alternatives, size_t i,
      std::priority_queue<QueryAlternative> &topK_alternatives,
      const std::vector<int> &curList, const std::string &cur_query,
      const std::string &prev_word, const Index &index);

  std::vector<QueryAlternative>
  GetTopQueryAlternatives(const std::string &query, const Index &index);

  Trie trie_;
};
